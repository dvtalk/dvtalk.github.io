I"ï	<h1 id="systemverilog-macro-with-examples">Systemverilog macro with examples</h1>
<p class="fs-5 fw-500">Blah blah blah</p>

<hr />
<h2 id="systemverilog-macro-101">Systemverilog macro 101</h2>
<h3 id="rules-to-follow">Rules to follow</h3>
<ul>
  <li>Avoid using the macro name which is similar to any compiler directives.</li>
  <li>No space after the backslash \ at the end of each line except for the last line of the macro.</li>
  <li>No space between Macro name and the open bracket for macro argument ‚Äú(‚Äú. &gt;.&lt;</li>
</ul>

<h3 id="macro-substitution-and-argument-substitution">Macro substitution and argument substitution</h3>

<h3 id="recommendation">Recommendation</h3>
<ul>
  <li>If writing a function/task is possible, avoid writing macro =D.</li>
  <li>Write all the macros in one file, and inlude that file in your sv package. Since redefine macro is allowed,
write macros everywhere in your codes make debugging these macros became painful.</li>
  <li>Macro can call other macros or compiler directives, or even calls itself, but be careful.</li>
</ul>

<h3 id="debugging">Debugging</h3>
<p>Macro is anoying when it comes to debugging,</p>
<ul>
  <li>Open macro files in EDA tool, such as verdi, then hover the mouse over the macro to see the generated code.</li>
</ul>

<hr />
<p>#Examples 
// Assertion to compare SIGNAL value with EXP_VALUE
// Provide clock in CLK, enable/reset signal in ENA. ENA default is 0(inactive).
// Use EXT_ERROR_CMD to add addtional statement when assertion fail, leave it blank if no use.
<code class="language-plaintext highlighter-rouge">define assertion_signal_check(SIGNAL, EXP_VALUE, CLK, ENA=0, EXT_ERROR_CMD) \
   property check_</code><code class="language-plaintext highlighter-rouge">SIGNAL</code><code class="language-plaintext highlighter-rouge">_p; \
      @(posedge CLK ) \
      disable iff (! ENA ) \
      ( SIGNAL == EXP_VALUE  ) ; \
   endproperty \
   assert property (check_</code><code class="language-plaintext highlighter-rouge">SIGNAL</code><code class="language-plaintext highlighter-rouge">_p) else begin \
      $error($psprintf(</code>‚ÄúThe SIGNAL is supposed to be EXP_VALUE, real value is 0x%x`‚Äù, SIGNAL )); <br />
      EXT_ERROR_CMD ; <br />
   end</p>

<hr />
<h2 id="finding-more-information">Finding more information</h2>
<p>To having more understanding as well as having more example, you can check the IEEE Standard for SystemVerilog, chapter.9 Process.</p>

:ET