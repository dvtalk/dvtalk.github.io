I"ú<h1 id="using-vim-terminal">Using Vim terminal</h1>
<p class="fs-5 fw-500">Vim supports the terminal feature since version 8.1. This feature allows us to have a terminal running in a Vim window . I was confused at the beginning, but after a while using this terminal, I have to admit that itâ€™s pretty useful and handy in many cases such as test your code immediately on the terminal, yank and paste the data from terminal to vim, etc. Letâ€™s see how it works.</p>

<hr />
<h2 id="using-vim-terminal-1">Using vim terminal</h2>
<h3 id="open-vim-terminal">Open vim terminal</h3>
<ul>
  <li>First to use vim terminal, we should have vim from version 8.1 and compiled with <code class="highlighter-rouge">+terminal</code> option.</li>
  <li>To open vim terminal, just type the command <code class="highlighter-rouge">:terminal</code>, or <code class="highlighter-rouge">:vert terminal</code> to open the terminal in a veritcal split window.</li>
  <li>To close the vim terminal, type <code class="highlighter-rouge">exit</code> or <code class="highlighter-rouge">Ctrl-W Ctrl-C</code></li>
  <li>To move between buffers and vim terminal buffer, use <code class="highlighter-rouge">:buffers</code> as normal, since vim terminal will be treated as a buffer in vim. Or if current vim terminal is opened in another window, just simply use <code class="highlighter-rouge">Ctrl-W Ctrl-W</code>.</li>
</ul>

<h3 id="vim-terminal-normal-and-terminal-job-mode">Vim Terminal-Normal and Terminal-Job mode</h3>
<p>Terminal-Normal mode and Terminal-Job mode are newly introduced along with vim terminal feature.</p>
<ul>
  <li>Terminal-Job mode is the default mode when we open the vim terminal. Itâ€™s actually will be like a normal terminal, where we can use the cli command.</li>
  <li>Terminal-Normal mode is kind of a cool mode that I really enjoy. It allows us to move the cursor around the terminal screen in a vim-way, and we also perform vim commands such as yanking, selecting text, but not modifying command like deleted, change, replace command.</li>
  <li>Type <code class="highlighter-rouge">Ctrl-W N</code> or <code class="highlighter-rouge">Ctrl\ Ctrl-N</code> to enter Terminal-Normal mode. Type <code class="highlighter-rouge">i</code> or <code class="highlighter-rouge">a</code> to return to Terminal-Job mode.
<script id="asciicast-353835" src="https://asciinema.org/a/353835.js" async=""></script></li>
</ul>

<hr />
<h2 id="vim-send-data-from-a-buffer-to-vim-terminal">Vim send data from a buffer to vim terminal</h2>
<h3 id="using-registers">Using registers</h3>
<p>To copy the data from the vim buffer to the vim terminal buffer, we can use registers. Simply yank the data from normal vim buffer to vim registers, then go to the vim terminal (in Terminal-Normal mode), then paste the data from the register using this command <code class="highlighter-rouge">Ctrl-W " {register}</code>.</p>

<h3 id="using-vim-sendtowindow">Using vim-sendtowindow</h3>
<p>Wanna be a little bit faster, use this <a href="https://github.com/KKPMW/vim-sendtowindow">vim-sendtowindow</a> plugin. This plugin actually doing the same thing as we disussed above but using vimscript: yank the selected data to a registers, then send the data in the register to the vim terminal. However I think itâ€™s quite handy when testing your code with vim terminal, check the plugin page if youâ€™re interested.</p>

<hr />
<h2 id="open-another-file-in-vim-terminal">Open another file in vim terminal</h2>
<p>Sometimes when I navigating through files inside a vim terminal and I want to open a file right from the terminal, I end up like in this figure below. A file is opened inside vim terminal with 2 status lines, one for the new opened file, one for the vim terminal (means the status line of current opened vim). This is pretty annoying to me.
<img src="https://8zuu0g.by.files.1drv.com/y4ms0VTF1SD3HMx67macafhAd9I7wHvT_mcW8zxEtabiMeFQHpkzte1YonNH3tE4GFSvdnoRfidzg96CxHchAKGBTOD2dlE7vEWciIe_vt_WAxC4Crva_Wci0mNzbBiuKUmswTg4me5_Z_-Y8I4gQLyUB7Xr_ZXD92PgxDEGEOXmpl9xIxxAl8njyzZ1RXGnEHMlpVG9Sylj0I-T4-LWZGwTg" alt="vim terminal" /></p>

<p>So I create this bash script, which is simply to open the new file from vim terminal to the current vim. Check <code class="highlighter-rouge">:h terminal</code> for more detail of how it works.
<script src="https://gist.github.com/dvtalk/7a1776737f4302b3ed7b71b68fce1b35.js"></script>
The command is <code class="highlighter-rouge">printf "&lt;ESC&gt;]51;[\"drop\", \"$pathdir\"]^G" </code> but I do not figure out how to display them correctly in this post :D.</p>

<p>Then in your <code class="highlighter-rouge">.cshrc</code> or <code class="highlighter-rouge">.bashrc</code> file, create an alias for vim command as below (for tcsh) so that we can use this script to open file as normal vim when in vim terminal.</p>
<div class="code">

  <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c"># tcsh</span>
<span class="k">if</span> <span class="o">(</span> <span class="nv">$?</span>VIM_TERMINAL <span class="o">)</span> <span class="k">then
   </span><span class="nb">alias </span>vi vimsend
endif</code></pre></figure>

</div>

<p>Now letâ€™s see how itâ€™s like when using this script to open a file inside vim terminal
<script id="asciicast-354593" src="https://asciinema.org/a/354593.js" async=""></script></p>

<h2 id="conclusion">Conclusion</h2>
<p>Those things above is pretty much everything that Iâ€™ve been doing inside vim terminal. If you like this feature already and want to dig deeper, just check <code class="highlighter-rouge">:h terminal</code></p>
:ET